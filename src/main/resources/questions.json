{
  "questions": [
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Что из нижеперечисленного является примитивным типом данных?"
      },
      "answer": {
        "type": "char; Boolean; Integer; String"
      },
      "correct": {
        "type": "char"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Что из нижеперечисленного не является модификатором доступа?"
      },
      "answer": {
        "type": "private; final; public; default"
      },
      "correct": {
        "type": "final"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Что не является приницпом ООП?"
      },
      "answer": {
        "type": "Полиморфизм; Агрегация; Композиция; Интерфейс; Абстракция"
      },
      "correct": {
        "type": "Интерфейс"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Чем отличаются два интерфейса Runnable и Callable?"
      },
      "answer": {
        "type": "Классы, реализующие интерфейс Runnable для выполнения задачи должны реализовывать метод run(). Классы, реализующие интерфейс Callable - метод start(); Метод run() не может выбрасывать проверяемые исключения, в то время как метод call() может; Метод Runnable.run() возвращает объект Future, Callable.call() не возвращает никаких значений; Интерфейс Runnable был введен в Java 6.0, а интерфейс Callable появился в Java 1.0 в составе библиотеки java.util.concurrent"
      },
      "correct": {
        "type": "Метод run() не может выбрасывать проверяемые исключения, в то время как метод call() может"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Может ли значение в столбце, на который наложено ограничение FOREIGN KEY, равняться NULL?"
      },
      "answer": {
        "type": "Да; Нет; Может, если на данный столбец не наложено ограничение NOT NULL"
      },
      "correct": {
        "type": "Может, если на данный столбец не наложено ограничение NOT NULL"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Какой результат работы данного кода?\n\npublic static void main(String%5b%5d args) {\n\n          byte x = -128;\n\n          x -= 2;\n\n          System.out.println(x);\n\n}"
      },
      "answer": {
        "type": "compile error; 2; 126; -130"
      },
      "correct": {
        "type": "126"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Как указать индекс последнего элемента массива?"
      },
      "answer": {
        "type": "array.length; array.size; array.size-1; array.length-1"
      },
      "correct": {
        "type": "array.length-1"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Какой результат работы данного фрагмента кода?\nfor(;;) {\n}"
      },
      "answer": {
        "type": "ошибка на этапе компиляции; бесконечный цикл; ошибка на этапе выполнения; этот код никогда не выполнится"
      },
      "correct": {
        "type": "бесконечный цикл"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "--х;"
      },
      "answer": {
        "type": "постфиксный инкремент; префиксный декремент; префиксный инкремент; постфиксный декремент"
      },
      "correct": {
        "type": "префиксный декремент"
      }
    },
    {
      "title": {
        "type": "java"
      },
      "question": {
        "type": "Что делает метод notifyAll()?"
      },
      "answer": {
        "type": "Пробуждает все потоки, ожидающие на этом мониторе объекта; Пробуждает все потоки, которые не ожидают на этом мониторе объекта; Пробуждает один поток, ожидающий на этом мониторе объекта; Ничего из вышеперечисленного"
      },
      "correct": {
        "type": "Пробуждает все потоки, ожидающие на этом мониторе объекта"
      }
    }
  ]
}
